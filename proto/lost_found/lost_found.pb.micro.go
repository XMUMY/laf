// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/lost_found/lost_found.proto

package lostfound

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for LostAndFound service

func NewLostAndFoundEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for LostAndFound service

type LostAndFoundService interface {
	GetBriefs(ctx context.Context, in *GetBriefsReq, opts ...client.CallOption) (*GetBriefsResp, error)
	GetDetail(ctx context.Context, in *GetDetailReq, opts ...client.CallOption) (*LostAndFoundDetail, error)
	AddItem(ctx context.Context, in *AddItemReq, opts ...client.CallOption) (*empty.Empty, error)
	DeleteItem(ctx context.Context, in *DeleteItemReq, opts ...client.CallOption) (*empty.Empty, error)
}

type lostAndFoundService struct {
	c    client.Client
	name string
}

func NewLostAndFoundService(name string, c client.Client) LostAndFoundService {
	return &lostAndFoundService{
		c:    c,
		name: name,
	}
}

func (c *lostAndFoundService) GetBriefs(ctx context.Context, in *GetBriefsReq, opts ...client.CallOption) (*GetBriefsResp, error) {
	req := c.c.NewRequest(c.name, "LostAndFound.GetBriefs", in)
	out := new(GetBriefsResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lostAndFoundService) GetDetail(ctx context.Context, in *GetDetailReq, opts ...client.CallOption) (*LostAndFoundDetail, error) {
	req := c.c.NewRequest(c.name, "LostAndFound.GetDetail", in)
	out := new(LostAndFoundDetail)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lostAndFoundService) AddItem(ctx context.Context, in *AddItemReq, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "LostAndFound.AddItem", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lostAndFoundService) DeleteItem(ctx context.Context, in *DeleteItemReq, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "LostAndFound.DeleteItem", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LostAndFound service

type LostAndFoundHandler interface {
	GetBriefs(context.Context, *GetBriefsReq, *GetBriefsResp) error
	GetDetail(context.Context, *GetDetailReq, *LostAndFoundDetail) error
	AddItem(context.Context, *AddItemReq, *empty.Empty) error
	DeleteItem(context.Context, *DeleteItemReq, *empty.Empty) error
}

func RegisterLostAndFoundHandler(s server.Server, hdlr LostAndFoundHandler, opts ...server.HandlerOption) error {
	type lostAndFound interface {
		GetBriefs(ctx context.Context, in *GetBriefsReq, out *GetBriefsResp) error
		GetDetail(ctx context.Context, in *GetDetailReq, out *LostAndFoundDetail) error
		AddItem(ctx context.Context, in *AddItemReq, out *empty.Empty) error
		DeleteItem(ctx context.Context, in *DeleteItemReq, out *empty.Empty) error
	}
	type LostAndFound struct {
		lostAndFound
	}
	h := &lostAndFoundHandler{hdlr}
	return s.Handle(s.NewHandler(&LostAndFound{h}, opts...))
}

type lostAndFoundHandler struct {
	LostAndFoundHandler
}

func (h *lostAndFoundHandler) GetBriefs(ctx context.Context, in *GetBriefsReq, out *GetBriefsResp) error {
	return h.LostAndFoundHandler.GetBriefs(ctx, in, out)
}

func (h *lostAndFoundHandler) GetDetail(ctx context.Context, in *GetDetailReq, out *LostAndFoundDetail) error {
	return h.LostAndFoundHandler.GetDetail(ctx, in, out)
}

func (h *lostAndFoundHandler) AddItem(ctx context.Context, in *AddItemReq, out *empty.Empty) error {
	return h.LostAndFoundHandler.AddItem(ctx, in, out)
}

func (h *lostAndFoundHandler) DeleteItem(ctx context.Context, in *DeleteItemReq, out *empty.Empty) error {
	return h.LostAndFoundHandler.DeleteItem(ctx, in, out)
}
