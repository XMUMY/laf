// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: api/lost_found/v4/lost_found.proto

package v4

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LostAndFoundClient is the client API for LostAndFound service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LostAndFoundClient interface {
	GetBriefs(ctx context.Context, in *GetBriefsReq, opts ...grpc.CallOption) (*GetBriefsResp, error)
	GetDetail(ctx context.Context, in *GetDetailReq, opts ...grpc.CallOption) (*LostAndFoundDetail, error)
	AddItem(ctx context.Context, in *AddItemReq, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteItem(ctx context.Context, in *DeleteItemReq, opts ...grpc.CallOption) (*empty.Empty, error)
}

type lostAndFoundClient struct {
	cc grpc.ClientConnInterface
}

func NewLostAndFoundClient(cc grpc.ClientConnInterface) LostAndFoundClient {
	return &lostAndFoundClient{cc}
}

func (c *lostAndFoundClient) GetBriefs(ctx context.Context, in *GetBriefsReq, opts ...grpc.CallOption) (*GetBriefsResp, error) {
	out := new(GetBriefsResp)
	err := c.cc.Invoke(ctx, "/xmux.lost_found.v4.LostAndFound/GetBriefs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lostAndFoundClient) GetDetail(ctx context.Context, in *GetDetailReq, opts ...grpc.CallOption) (*LostAndFoundDetail, error) {
	out := new(LostAndFoundDetail)
	err := c.cc.Invoke(ctx, "/xmux.lost_found.v4.LostAndFound/GetDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lostAndFoundClient) AddItem(ctx context.Context, in *AddItemReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/xmux.lost_found.v4.LostAndFound/AddItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lostAndFoundClient) DeleteItem(ctx context.Context, in *DeleteItemReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/xmux.lost_found.v4.LostAndFound/DeleteItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LostAndFoundServer is the server API for LostAndFound service.
// All implementations must embed UnimplementedLostAndFoundServer
// for forward compatibility
type LostAndFoundServer interface {
	GetBriefs(context.Context, *GetBriefsReq) (*GetBriefsResp, error)
	GetDetail(context.Context, *GetDetailReq) (*LostAndFoundDetail, error)
	AddItem(context.Context, *AddItemReq) (*empty.Empty, error)
	DeleteItem(context.Context, *DeleteItemReq) (*empty.Empty, error)
	mustEmbedUnimplementedLostAndFoundServer()
}

// UnimplementedLostAndFoundServer must be embedded to have forward compatible implementations.
type UnimplementedLostAndFoundServer struct {
}

func (UnimplementedLostAndFoundServer) GetBriefs(context.Context, *GetBriefsReq) (*GetBriefsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBriefs not implemented")
}
func (UnimplementedLostAndFoundServer) GetDetail(context.Context, *GetDetailReq) (*LostAndFoundDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetail not implemented")
}
func (UnimplementedLostAndFoundServer) AddItem(context.Context, *AddItemReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItem not implemented")
}
func (UnimplementedLostAndFoundServer) DeleteItem(context.Context, *DeleteItemReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItem not implemented")
}
func (UnimplementedLostAndFoundServer) mustEmbedUnimplementedLostAndFoundServer() {}

// UnsafeLostAndFoundServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LostAndFoundServer will
// result in compilation errors.
type UnsafeLostAndFoundServer interface {
	mustEmbedUnimplementedLostAndFoundServer()
}

func RegisterLostAndFoundServer(s grpc.ServiceRegistrar, srv LostAndFoundServer) {
	s.RegisterService(&LostAndFound_ServiceDesc, srv)
}

func _LostAndFound_GetBriefs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBriefsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LostAndFoundServer).GetBriefs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmux.lost_found.v4.LostAndFound/GetBriefs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LostAndFoundServer).GetBriefs(ctx, req.(*GetBriefsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LostAndFound_GetDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LostAndFoundServer).GetDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmux.lost_found.v4.LostAndFound/GetDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LostAndFoundServer).GetDetail(ctx, req.(*GetDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LostAndFound_AddItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LostAndFoundServer).AddItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmux.lost_found.v4.LostAndFound/AddItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LostAndFoundServer).AddItem(ctx, req.(*AddItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LostAndFound_DeleteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LostAndFoundServer).DeleteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmux.lost_found.v4.LostAndFound/DeleteItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LostAndFoundServer).DeleteItem(ctx, req.(*DeleteItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

// LostAndFound_ServiceDesc is the grpc.ServiceDesc for LostAndFound service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LostAndFound_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xmux.lost_found.v4.LostAndFound",
	HandlerType: (*LostAndFoundServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBriefs",
			Handler:    _LostAndFound_GetBriefs_Handler,
		},
		{
			MethodName: "GetDetail",
			Handler:    _LostAndFound_GetDetail_Handler,
		},
		{
			MethodName: "AddItem",
			Handler:    _LostAndFound_AddItem_Handler,
		},
		{
			MethodName: "DeleteItem",
			Handler:    _LostAndFound_DeleteItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/lost_found/v4/lost_found.proto",
}
