// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/lost_found/v4/lost_found.proto

package v4

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on GetBriefsReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetBriefsReq) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetBefore()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBriefsReqValidationError{
				field:  "Before",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetBriefsReqValidationError is the validation error returned by
// GetBriefsReq.Validate if the designated constraints aren't met.
type GetBriefsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBriefsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBriefsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBriefsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBriefsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBriefsReqValidationError) ErrorName() string { return "GetBriefsReqValidationError" }

// Error satisfies the builtin error interface
func (e GetBriefsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBriefsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBriefsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBriefsReqValidationError{}

// Validate checks the field values on GetBriefsResp with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetBriefsResp) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetBriefs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBriefsRespValidationError{
					field:  fmt.Sprintf("Briefs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetBriefsRespValidationError is the validation error returned by
// GetBriefsResp.Validate if the designated constraints aren't met.
type GetBriefsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBriefsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBriefsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBriefsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBriefsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBriefsRespValidationError) ErrorName() string { return "GetBriefsRespValidationError" }

// Error satisfies the builtin error interface
func (e GetBriefsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBriefsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBriefsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBriefsRespValidationError{}

// Validate checks the field values on LostAndFoundBrief with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *LostAndFoundBrief) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Uid

	// no validation rules for Type

	// no validation rules for Name

	if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LostAndFoundBriefValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Location

	return nil
}

// LostAndFoundBriefValidationError is the validation error returned by
// LostAndFoundBrief.Validate if the designated constraints aren't met.
type LostAndFoundBriefValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LostAndFoundBriefValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LostAndFoundBriefValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LostAndFoundBriefValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LostAndFoundBriefValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LostAndFoundBriefValidationError) ErrorName() string {
	return "LostAndFoundBriefValidationError"
}

// Error satisfies the builtin error interface
func (e LostAndFoundBriefValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLostAndFoundBrief.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LostAndFoundBriefValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LostAndFoundBriefValidationError{}

// Validate checks the field values on GetDetailReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetDetailReq) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetId()) != 24 {
		return GetDetailReqValidationError{
			field:  "Id",
			reason: "value length must be 24 runes",
		}

	}

	return nil
}

// GetDetailReqValidationError is the validation error returned by
// GetDetailReq.Validate if the designated constraints aren't met.
type GetDetailReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDetailReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDetailReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDetailReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDetailReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDetailReqValidationError) ErrorName() string { return "GetDetailReqValidationError" }

// Error satisfies the builtin error interface
func (e GetDetailReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDetailReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDetailReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDetailReqValidationError{}

// Validate checks the field values on LostAndFoundDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *LostAndFoundDetail) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Uid

	// no validation rules for Type

	// no validation rules for Name

	if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LostAndFoundDetailValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Location

	// no validation rules for Description

	// no validation rules for Contacts

	return nil
}

// LostAndFoundDetailValidationError is the validation error returned by
// LostAndFoundDetail.Validate if the designated constraints aren't met.
type LostAndFoundDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LostAndFoundDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LostAndFoundDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LostAndFoundDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LostAndFoundDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LostAndFoundDetailValidationError) ErrorName() string {
	return "LostAndFoundDetailValidationError"
}

// Error satisfies the builtin error interface
func (e LostAndFoundDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLostAndFoundDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LostAndFoundDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LostAndFoundDetailValidationError{}

// Validate checks the field values on AddItemReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *AddItemReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Type

	if utf8.RuneCountInString(m.GetName()) > 50 {
		return AddItemReqValidationError{
			field:  "Name",
			reason: "value length must be at most 50 runes",
		}
	}

	if m.GetTime() == nil {
		return AddItemReqValidationError{
			field:  "Time",
			reason: "value is required",
		}
	}

	if utf8.RuneCountInString(m.GetLocation()) > 100 {
		return AddItemReqValidationError{
			field:  "Location",
			reason: "value length must be at most 100 runes",
		}
	}

	if utf8.RuneCountInString(m.GetDescription()) > 500 {
		return AddItemReqValidationError{
			field:  "Description",
			reason: "value length must be at most 500 runes",
		}
	}

	if len(m.GetContacts()) > 10 {
		return AddItemReqValidationError{
			field:  "Contacts",
			reason: "value must contain no more than 10 pair(s)",
		}
	}

	for key, val := range m.GetContacts() {
		_ = val

		if utf8.RuneCountInString(key) > 50 {
			return AddItemReqValidationError{
				field:  fmt.Sprintf("Contacts[%v]", key),
				reason: "value length must be at most 50 runes",
			}
		}

		if utf8.RuneCountInString(val) > 100 {
			return AddItemReqValidationError{
				field:  fmt.Sprintf("Contacts[%v]", key),
				reason: "value length must be at most 100 runes",
			}
		}

	}

	return nil
}

// AddItemReqValidationError is the validation error returned by
// AddItemReq.Validate if the designated constraints aren't met.
type AddItemReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddItemReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddItemReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddItemReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddItemReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddItemReqValidationError) ErrorName() string { return "AddItemReqValidationError" }

// Error satisfies the builtin error interface
func (e AddItemReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddItemReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddItemReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddItemReqValidationError{}

// Validate checks the field values on DeleteItemReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DeleteItemReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteItemReqValidationError is the validation error returned by
// DeleteItemReq.Validate if the designated constraints aren't met.
type DeleteItemReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteItemReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteItemReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteItemReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteItemReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteItemReqValidationError) ErrorName() string { return "DeleteItemReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteItemReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteItemReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteItemReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteItemReqValidationError{}
